(this.webpackJsonp=this.webpackJsonp||[]).push([["dfwconnector"],{FrkV:function(e){e.exports=JSON.parse('{"api-bridge-test-button":{"title":"Bridge Test","success":"Bridge wurde erfolgreich getestet","error":"Verbindung konnte nicht hergestellt werden. Bitte prÃ¼fe die Zugangsdaten"},"api-update-key-button":{"title":"Update Store Key","success":"Store Key Updated","error":"Error"}}')},JQnf:function(e,t){const i=Shopware.Classes.ApiService,{Application:s}=Shopware;class n extends i{constructor(e,t,i="api-bridge-test"){super(e,t,i)}check(e){const t=this.getBasicHeaders({});return this.httpClient.post(`_action/${this.getApiBasePath()}/updatekey`,e,{headers:t}).then(e=>i.handleResponse(e))}}s.addServiceProvider("apiUpdateKey",e=>{const t=s.getContainer("init");return new n(t.httpClient,e.loginService)})},TP0k:function(e,t){e.exports='<div style="display: block;">\n    <sw-button-process\n        :isLoading="isLoading"\n        :processSuccess="isSaveSuccessful"\n        @process-finish="saveFinish"\n        @click="updatekey"\n    >{{ $tc("api-update-key-button.title") }}</sw-button-process>\n</div>'},"Ykg/":function(e,t){e.exports='<div style="display: block; margin-bottom: 20px">\n    <sw-button-process\n        :isLoading="isLoading"\n        :processSuccess="isSaveSuccessful"\n        @process-finish="saveFinish"\n        @click="check"\n    >{{ $tc("api-bridge-test-button.title") }}</sw-button-process>\n</div>'},pSuH:function(e){e.exports=JSON.parse('{"api-bridge-test-button":{"title":"Bridge Test","success":"Bridge was successfully tested","error":"Connection could not be established. Please check the access data"},"api-update-key-button":{"title":"Update Store Key","success":"Store Key Updated","error":"Error"}}')},qpVH:function(e,t,i){"use strict";i.r(t);i("vUMW"),i("JQnf");var s=i("Ykg/"),n=i.n(s);const{Component:r,Mixin:o}=Shopware;r.register("api-bridge-test-button",{template:n.a,props:["label"],inject:["apiBridgeTest","systemConfigApiService"],mixins:[o.getByName("notification")],data:()=>({config:{},configKey:"api2CartBridgeInstaller.config.StoreKey",storeKeyElem:{},isLoading:!1,isSaveSuccessful:!1}),computed:{pluginConfig(){var e;if(this.$parent.$parent.$parent.$children.length>1)var t=this.$parent.$parent.$parent.$children;else t=this.$parent.$parent.$parent.$children[0].$children;return t.map((function(t,i){void 0!==t.$children[0].$attrs.name&&t.$children[0].$attrs.name.includes("StoreKey")&&(e=t.$children[0])})),void 0!==e.$refs.component?this.storeKeyElem=e.$refs.component:this.storeKeyElem=e,this.configKey=this.storeKeyElem.$attrs.name,this.systemConfigApiService.getValues(this.configKey.replaceAll(".StoreKey","")).then(e=>{this.config=e})}},methods:{saveFinish(){this.isSaveSuccessful=!1},check(){this.isLoading=!0,this.apiBridgeTest.check(this.pluginConfig).then(e=>{e.success?(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("api-bridge-test-button.title"),message:this.$tc("api-bridge-test-button.success")})):this.createNotificationError({title:this.$tc("api-bridge-test-button.title"),message:e.error}),this.isLoading=!1})}}});var a=i("TP0k"),c=i.n(a);const{Component:p,Mixin:h}=Shopware;p.register("api-update-key-button",{template:c.a,props:["label"],inject:["apiUpdateKey","systemConfigApiService"],mixins:[h.getByName("notification")],data:()=>({config:{},configKey:"api2CartBridgeInstaller.config.StoreKey",storeKeyElem:{},isLoading:!1,isSaveSuccessful:!1}),computed:{pluginConfig(){var e;if(this.$parent.$parent.$parent.$children.length>1)var t=this.$parent.$parent.$parent.$children;else t=this.$parent.$parent.$parent.$children[0].$children;return t.map((function(t,i){void 0!==t.$children[0].$attrs.name&&t.$children[0].$attrs.name.includes("StoreKey")&&(e=t.$children[0])})),void 0!==e.$refs.component?this.storeKeyElem=e.$refs.component:this.storeKeyElem=e,this.configKey=this.storeKeyElem.$attrs.name,this.systemConfigApiService.getValues(this.configKey.replaceAll(".StoreKey","")).then(e=>{this.config=e})}},methods:{saveFinish(){this.isSaveSuccessful=!1},updatekey(){this.isLoading=!0,this.apiUpdateKey.check(this.pluginConfig).then(e=>{e.success?(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("api-update-key-button.title"),message:this.$tc("api-update-key-button.success")}),this.$set(this.config,this.configKey,e.storekey),this.systemConfigApiService.saveValues(this.config,null).then(()=>{this.isLoading=!1,this.storeKeyElem.$emit("input",e.storekey)})):this.createNotificationError({title:this.$tc("api-update-key-button.title"),message:e.error})})}}});var l=i("FrkV"),d=i("pSuH");Shopware.Locale.extend("de-DE",l),Shopware.Locale.extend("en-GB",d)},vUMW:function(e,t){const i=Shopware.Classes.ApiService,{Application:s}=Shopware;class n extends i{constructor(e,t,i="api-bridge-test"){super(e,t,i)}check(e){const t=this.getBasicHeaders({});return this.httpClient.post(`_action/${this.getApiBasePath()}/verify`,e,{headers:t}).then(e=>i.handleResponse(e))}}s.addServiceProvider("apiBridgeTest",e=>{const t=s.getContainer("init");return new n(t.httpClient,e.loginService)})}},[["qpVH","runtime"]]]);